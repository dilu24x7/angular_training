doubts.txt
// property-binding y html inside variable?
// instance variable y no let?





<app-root>
<app-header>
<router-outlet>
<sign-in>
<my-sign>


communication btwn components
output - child to parent
event-binding ()

input - parent to child
property binding []


component life cycle
1. when tag(component) is used, initialized and rendered.
2. 



constructor
ngOnChanges
ngOnInit
ngDoCheck
  ngAfterContentInit
  ngAfterContentChecked
  ngAfterViewInit
  ngAfter
ngOnDestroy


data is local to the component

cli commands

--flat no new folder
--skip-tests no spec file
-s no css file
-t no html file
-m (default registers in root module) specify the module to be registered on to.
eg:
ng g c shopping/products --flat --skip-tests -m=shopping -s


when data needs to be shared with sibling components
angular supports only constructor dependency injection (not any other)
re-usable components go only with input/output


UI - side 

UI logic Components 
NON-UI logic Services (NON UI BusinessLogic, NON UI DataLogic _interacts with REST WEB SERVICE)

SERVICES:
decorarte with @injectable() decorator
register in module using "providers" (done in root module as its singleton objects)
use the service as injectable parameter in constructor



json-server, lowDB




nested routes

app component -> list component -> products component

ActivatedRoute params queryparams



module loading
 load all dependencies

1. Eager loading
2. Lazy loading
 - loadChildren


 Navigation Strategy
 - path based
 - hash based
 {useHash: true} // load faster no redirection to server

 Router Guards


 Deployment
 ng build
 ng build --prod